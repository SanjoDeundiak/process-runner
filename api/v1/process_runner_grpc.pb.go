// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: api/v1/process_runner.proto

package apiv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ProcessRunnerService_Start_FullMethodName     = "/api.v1.ProcessRunnerService/Start"
	ProcessRunnerService_Status_FullMethodName    = "/api.v1.ProcessRunnerService/Status"
	ProcessRunnerService_Stop_FullMethodName      = "/api.v1.ProcessRunnerService/Stop"
	ProcessRunnerService_GetOutput_FullMethodName = "/api.v1.ProcessRunnerService/GetOutput"
)

// ProcessRunnerServiceClient is the client API for ProcessRunnerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// API of the service that allows to start/stop/monitor processes.
type ProcessRunnerServiceClient interface {
	// Start a new process and returns its status
	Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartResponse, error)
	// Get a process status
	Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	// Stop a process using SIGKILL
	Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error)
	// Stream output of a process. The default behavior is full replay from the beginning, with a future flag to tail only.
	GetOutput(ctx context.Context, in *GetOutputRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetOutputResponse], error)
}

type processRunnerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProcessRunnerServiceClient(cc grpc.ClientConnInterface) ProcessRunnerServiceClient {
	return &processRunnerServiceClient{cc}
}

func (c *processRunnerServiceClient) Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartResponse)
	err := c.cc.Invoke(ctx, ProcessRunnerService_Start_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processRunnerServiceClient) Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, ProcessRunnerService_Status_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processRunnerServiceClient) Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StopResponse)
	err := c.cc.Invoke(ctx, ProcessRunnerService_Stop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processRunnerServiceClient) GetOutput(ctx context.Context, in *GetOutputRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetOutputResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ProcessRunnerService_ServiceDesc.Streams[0], ProcessRunnerService_GetOutput_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetOutputRequest, GetOutputResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ProcessRunnerService_GetOutputClient = grpc.ServerStreamingClient[GetOutputResponse]

// ProcessRunnerServiceServer is the server API for ProcessRunnerService service.
// All implementations must embed UnimplementedProcessRunnerServiceServer
// for forward compatibility.
//
// API of the service that allows to start/stop/monitor processes.
type ProcessRunnerServiceServer interface {
	// Start a new process and returns its status
	Start(context.Context, *StartRequest) (*StartResponse, error)
	// Get a process status
	Status(context.Context, *StatusRequest) (*StatusResponse, error)
	// Stop a process using SIGKILL
	Stop(context.Context, *StopRequest) (*StopResponse, error)
	// Stream output of a process. The default behavior is full replay from the beginning, with a future flag to tail only.
	GetOutput(*GetOutputRequest, grpc.ServerStreamingServer[GetOutputResponse]) error
	mustEmbedUnimplementedProcessRunnerServiceServer()
}

// UnimplementedProcessRunnerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProcessRunnerServiceServer struct{}

func (UnimplementedProcessRunnerServiceServer) Start(context.Context, *StartRequest) (*StartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (UnimplementedProcessRunnerServiceServer) Status(context.Context, *StatusRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedProcessRunnerServiceServer) Stop(context.Context, *StopRequest) (*StopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedProcessRunnerServiceServer) GetOutput(*GetOutputRequest, grpc.ServerStreamingServer[GetOutputResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetOutput not implemented")
}
func (UnimplementedProcessRunnerServiceServer) mustEmbedUnimplementedProcessRunnerServiceServer() {}
func (UnimplementedProcessRunnerServiceServer) testEmbeddedByValue()                              {}

// UnsafeProcessRunnerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProcessRunnerServiceServer will
// result in compilation errors.
type UnsafeProcessRunnerServiceServer interface {
	mustEmbedUnimplementedProcessRunnerServiceServer()
}

func RegisterProcessRunnerServiceServer(s grpc.ServiceRegistrar, srv ProcessRunnerServiceServer) {
	// If the following call pancis, it indicates UnimplementedProcessRunnerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ProcessRunnerService_ServiceDesc, srv)
}

func _ProcessRunnerService_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessRunnerServiceServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProcessRunnerService_Start_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessRunnerServiceServer).Start(ctx, req.(*StartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProcessRunnerService_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessRunnerServiceServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProcessRunnerService_Status_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessRunnerServiceServer).Status(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProcessRunnerService_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessRunnerServiceServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProcessRunnerService_Stop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessRunnerServiceServer).Stop(ctx, req.(*StopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProcessRunnerService_GetOutput_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetOutputRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProcessRunnerServiceServer).GetOutput(m, &grpc.GenericServerStream[GetOutputRequest, GetOutputResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ProcessRunnerService_GetOutputServer = grpc.ServerStreamingServer[GetOutputResponse]

// ProcessRunnerService_ServiceDesc is the grpc.ServiceDesc for ProcessRunnerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProcessRunnerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.ProcessRunnerService",
	HandlerType: (*ProcessRunnerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Start",
			Handler:    _ProcessRunnerService_Start_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _ProcessRunnerService_Status_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _ProcessRunnerService_Stop_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetOutput",
			Handler:       _ProcessRunnerService_GetOutput_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/v1/process_runner.proto",
}
