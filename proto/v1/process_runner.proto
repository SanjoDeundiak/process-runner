syntax = "proto3";

package proto.v1;

import "google/protobuf/timestamp.proto";

option go_package = "github.com/SanjoDeundiak/process-runner/proto/v1;protov1";

// All fields are optional per proto3 recommendations. Client and server should check correctness of data.

// API of the service that allows to start/stop/monitor processes.
service ProcessRunnerService {
  // Start a new process and returns its status
  rpc Start(StartRequest) returns (StartResponse);
  // Get a process status
  rpc Status(StatusRequest) returns (StatusResponse);
  // Stop a process using SIGKILL
  rpc Stop(StopRequest) returns (StopResponse);
  // Stream output of a process. The default behavior is full replay from the beginning, with a future flag to tail only.
  rpc GetOutput(GetOutputRequest) returns (stream GetOutputResponse);
}

message StartRequest {
  // Command to execute
  string command = 1;
  // Command arguments
  repeated string args = 2;
}

message StartResponse {
  string process_identifier = 1;
  ProcessStatus status = 2;
}

message StatusRequest {
  string process_identifier = 1;
}

message StatusResponse {
  string identifier = 1;
  Process process = 2;
  ProcessStatus status = 3;
}

message StopRequest {
  string process_identifier = 1;
}

message StopResponse {
  ProcessStatus process_status = 1;
}

message GetOutputRequest {
  string process_identifier = 1;
}

// Chunk of the output
message GetOutputResponse {
  enum Type {
    TYPE_UNSPECIFIED = 0;
    TYPE_STDOUT = 1;
    TYPE_STDERR = 2;
  }
  // The type of the stream
  Type type = 1;
  // Binary chunk of the stream
  bytes data = 2;
  // gRPC streaming guarantees ordering, so don't need any chunk numeration on this level
}

// Process id and status
message Process {
  // Command that was used to start the process
  string command = 1;
  // Command arguments
  repeated string args = 2;
}

// Process state
enum ProcessState {
  PROCESS_STATE_UNSPECIFIED = 0;
  PROCESS_STATE_RUNNING = 1;
  PROCESS_STATE_SLEEPING = 2;
  PROCESS_STATE_STOPPED = 3;
  PROCESS_STATE_ZOMBIE = 4;
}

// Status of a process
message ProcessStatus {
  ProcessState state = 1;
  optional int32 exit_code = 2;
  google.protobuf.Timestamp start_time = 3;
  google.protobuf.Timestamp end_time = 4;
  // Might add a lot of information here: CWD, resource usage, etc.
  // PID is consciously not sent to the client
}
